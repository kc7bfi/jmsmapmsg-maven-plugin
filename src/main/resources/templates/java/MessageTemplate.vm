package $packageName;

import javax.jms.JMSContext;
import javax.jms.JMSException;
import javax.jms.MapMessage;

/**
 * Generated with Velocity - DO NOT EDIT
#if ($classJavadoc)
 *
 * $classJavadoc
#end
 */
public class $display.capitalize($className) {

#foreach ($member in $members)
	private $member.type $member.name;
#end

	/**
	 * Constructor.
	 */
	public $display.capitalize($className)() {
	}

	/**
	 * Constructor
	 *
#foreach ($member in $members)
#if ($member.javadoc)
	 * @param $member.name $member.javadoc
#end
#end
	 */
	public $display.capitalize($className)(#foreach ($member in $members)$member.type $member.name#if($foreach.hasNext),#end#end) {
#foreach ($member in $members)
		this.$member.name = $member.name;
#end
	}

#foreach ($member in $members)
#if ($member.javadoc)
	/**
	 * @return $member.javadoc
	 */
#end
#if ($member.type == "boolean")
	public $member.type is$display.capitalize($member.name)() {
		return $member.name;
	}
	
#else
	public $member.type get$display.capitalize($member.name)() {
		return $member.name;
	}
	
#end
#end
#foreach ($member in $members)
#if ($member.javadoc)
	/**
	 * @param $member.name $member.javadoc
	 */
#end
	public void set$display.capitalize($member.name)($member.type $member.name) {
		this.$member.name = $member.name;
	}

#end

	/**
	 * Convert to a MapMessage
	 * @param jmsContext the JMS Context
	 * @returns the map message
	 * @throws JMSException message errors
	 */
	public MapMessage toMessage(JMSContext jmsContext) throws JMSException {
	
		// check for required values
#foreach ($member in $members)
#if ($member.required)
		if ($member.name == null) throw new JMSException("member $member.property is required");
#end
#end
	
		MapMessage msg = jmsContext.createMapMessage();
#foreach ($member in $members)
#if ($member.type == "String")
		msg.setString("$member.property", $member.name);
#elseif ($member.type == "Long")
		msg.setLong("$member.property", $member.name);
#else
		if ($member.name instanceof Enum) {
			msg.setString("$member.property", ${member.name}.getName());
		}
#end
#end		
		return msg;
	}

	/**
	 * Convert to a MapMessage
	 * @param jmsContext the JMS Context
#foreach ($member in $members)
#if ($member.javadoc)
	 * @param $member.name $member.javadoc
#end
#end
	 * @returns the map message
	 * @throws JMSException message errors
	 */
	public static MapMessage toMessage(JMSContext jmsContext,#foreach ($member in $members)$member.type $member.name#if($foreach.hasNext),#end#end) throws JMSException {
		$display.capitalize($className) message = new $display.capitalize($className)(#foreach ($member in $members)$member.name#if($foreach.hasNext),#end#end);
		return message.toMessage(jmsContext);
	}

	/**
	 * Convert from a MapMessage
	 * @param msg the message
	 * @returns the map message
	 * @throws JMSException message errors
	 */
	public static $display.capitalize($className) fromMessage(MapMessage msg) throws JMSException {
	
		// check for required values
#foreach ($member in $members)
#if ($member.required)
		if (!msg.itemExists("$member.property")) throw new JMSException("member $member.property is required");
#end
#end
	
		$display.capitalize($className) message = new $display.capitalize($className)();
#foreach ($member in $members)
#if ($member.type == "String")
		message.$member.name = msg.getString("$member.property");
#elseif ($member.type == "Long")
		message.$member.name = msg.getLong("$member.property");
#else
		if (message.$member.name instanceof Enum) {
			message.$member.name = ${member.type}.fromString(msg.getString("$member.property"));
		}
#end
#end

		return message;
	}
}
