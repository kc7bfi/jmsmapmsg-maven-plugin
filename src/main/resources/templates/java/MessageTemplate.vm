package $packageName;

import javax.jms.ConnectionFactory;
import javax.jms.JMSContext;
import javax.jms.JMSException;
import javax.jms.MapMessage;
import javax.jms.Topic;

/**
 * Generated with Velocity - DO NOT EDIT
#if ($classJavadoc)
 *
 * $classJavadoc
#end
 */
public class $display.capitalize($className) {

	private static String TheEventType = "$eventType";

#foreach ($property in $properties)
	private $property.type $property.name;
#end

	/**
	 * Constructor.
	 */
	public $display.capitalize($className)() {
	}

	/**
	 * Constructor
	 *
#foreach ($property in $properties)
#if ($property.javadoc)
	 * @param $property.name $property.javadoc
#end
#end
	 */
	public $display.capitalize($className)(#foreach ($property in $properties)$property.type $property.name#if($foreach.hasNext),#end#end) {
#foreach ($property in $properties)
		this.$property.name = $property.name;
#end
	}

#foreach ($property in $properties)
#if ($property.javadoc)
	/**
	 * @return $property.javadoc
	 */
#end
#if ($property.type == "boolean")
	public $property.type is$display.capitalize($property.name)() {
		return $property.name;
	}
	
#else
	public $property.type get$display.capitalize($property.name)() {
		return $property.name;
	}
	
#end
#end
#foreach ($property in $properties)
#if ($property.javadoc)
	/**
	 * @param $property.name $property.javadoc
	 */
#end
	public void set$display.capitalize($property.name)($property.type $property.name) {
		this.$property.name = $property.name;
	}

#end

	/**
	 * @param mapMsg the message to test
	 * @return true if the correct event type
	 * @throws JMSException a JMS exception
	 */
	public static boolean isMessage(MapMessage mapMsg) throws JMSException {
		return mapMsg.itemExists("EventType") && TheEventType.equals(mapMsg.getString("EventType"));
	}

	/**
	 * @param jmsConnectionFactory the JMS connection factory
	 * @param topic the JMS topic
	 * @param ttl the message time-to-live
	 * @throws NumberFormatException problem unpacking a number
	 * @throws JMSException a JMS exception
	 */
	private void validate() throws JMSException {
#foreach ($property in $properties)
#if ($property.required)
		if ($property.name == null) throw new JMSException("property $property.property is required");
#end
#if ($property.minimum)
		if ($property.name < $property.minimum) throw new JMSException("property $property.property must be at least $property.minimum");
#end
#end
	}
	
	/**
	 * @param jmsConnectionFactory the JMS connection factory
	 * @param topic the JMS topic
	 * @param ttl the message time-to-live
	 * @throws NumberFormatException problem unpacking a number
	 * @throws JMSException a JMS exception
	 */
	public void send(ConnectionFactory jmsConnectionFactory, Topic topic, long ttl) throws NumberFormatException, JMSException {
		validate();
		try (JMSContext jmsContext = jmsConnectionFactory.createContext()) {
			MapMessage mapMsg = jmsContext.createMapMessage();
#foreach ($property in $properties)
#if ($property.type == "String")
			mapMsg.setString("$property.property", $property.name);
#elseif ($property.type == "Long")
			mapMsg.setLong("$property.property", $property.name);
#elseif ($property.type == "Integer")
			mapMsg.setInt("$property.property", $property.name);
#end
#end
			jmsContext.createProducer().setTimeToLive(ttl).send(topic, mapMsg);
		}
	}

	/**
	 * @param mapMsg the received map message
	 * @return the message
	 * @throws JMSException a JMS exception
	 */
	public static $className fromMessage(MapMessage mapMsg) throws JMSException {
		if (!isMessage(mapMsg)) throw new JMSException("Wrong Event Type");
		$className msg = new $className();
#foreach ($property in $properties)
#if ($property.type == "String")
		if (mapMsg.itemExists("$property.property")) msg.set$display.capitalize(${property.name})(mapMsg.getString("$property.property"));
#elseif ($property.type == "Long")
		if (mapMsg.itemExists("$property.property")) msg.set$display.capitalize(${property.name})(mapMsg.getLong("$property.property"));
#elseif ($property.type == "Integer")
		if (mapMsg.itemExists("$property.property")) msg.set$display.capitalize(${property.name})(mapMsg.getInt("$property.property"));
#end
#end
		msg.validate();
		return msg;
	}
}
